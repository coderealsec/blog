generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role        @default(USER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  likes         BlogLike[]
  bookmarks     BlogBookmark[]
  blogPosts     BlogPost[]
  comments      Comment[]
  sessions      Session[]
  MediaFile     MediaFile[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id             String               @id @default(cuid())
  title          String
  slug           String               @unique
  content        String
  excerpt        String?
  imageUrl       String?
  published      Boolean              @default(false)
  publishedAt    DateTime?
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  viewCount      Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  authorId       String
  likeCount      Int                  @default(0)
  likes          BlogLike[]
  bookmarks      BlogBookmark[]
  author         User                 @relation(fields: [authorId], references: [id])
  categories     BlogPostToCategory[]
  tags           BlogPostToTag[]
  comments       Comment[]

  @@index([authorId])
  @@index([slug])
  @@index([published])
}

model BlogCategory {
  id             String               @id @default(cuid())
  name           String
  slug           String               @unique
  description    String?
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  isActive       Boolean              @default(true)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  posts          BlogPostToCategory[]

  @@index([slug])
  @@index([isActive])
}

model BlogTag {
  id          String          @id @default(cuid())
  name        String
  slug        String          @unique
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  description String?
  posts       BlogPostToTag[]

  @@index([slug])
  @@index([isActive])
}

model BlogPostToCategory {
  postId     String
  categoryId String
  assignedAt DateTime     @default(now())
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       BlogPost     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}

model BlogPostToTag {
  postId     String
  tagId      String
  assignedAt DateTime @default(now())
  post       BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag        BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  blogId     String
  isApproved Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  isReported Boolean  @default(false)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog       BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([blogId])
}

model BlogLike {
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  blog      BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
  @@index([userId])
  @@index([blogId])
}

model MediaFile {
  id           String   @id @default(cuid())
  fileName     String
  filePath     String
  fileUrl      String
  fileType     String
  mimeType     String
  fileSize     Int
  altText      String?
  description  String?
  width        Int?
  height       Int?
  uploadedById String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([uploadedById])
  @@index([fileType])
}

model Settings {
  id             String   @id @default(cuid())
  key            String   @unique
  value          String   @db.Text
  section        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([section])
  @@index([key])
}

model BlogBookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  blogId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([userId])
  @@index([blogId])
}

enum Role {
  ADMIN
  USER
  EDITOR
}
